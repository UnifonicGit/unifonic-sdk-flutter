// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// # iOS UN (UserNotification) symbols
///
/// Dart/Flutter translation of the iOS permissions API. In a future release,
/// we may replace this API with a consistent API for all platforms that require
/// permissions to show notifications to the user.
/// UNAuthorizationStatus: Constants indicating whether the app is allowed to
/// schedule notifications.
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings/1648391-authorizationstatus) for more information
typedef NS_ENUM(NSUInteger, UNIUNAuthorizationStatus) {
  UNIUNAuthorizationStatusNotDetermined = 0,
  UNIUNAuthorizationStatusDenied = 1,
  UNIUNAuthorizationStatusAuthorized = 2,
  UNIUNAuthorizationStatusProvisional = 3,
  UNIUNAuthorizationStatusEphemeral = 4,
};

/// Wrapper for UNIUNAuthorizationStatus to allow for nullability.
@interface UNIUNAuthorizationStatusBox : NSObject
@property(nonatomic, assign) UNIUNAuthorizationStatus value;
- (instancetype)initWithValue:(UNIUNAuthorizationStatus)value;
@end

/// The type of notification the user will see
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unalertstyle) for more information
typedef NS_ENUM(NSUInteger, UNIUNAlertStyle) {
  UNIUNAlertStyleNone = 0,
  UNIUNAlertStyleBanner = 1,
  UNIUNAlertStyleAlert = 2,
};

/// Wrapper for UNIUNAlertStyle to allow for nullability.
@interface UNIUNAlertStyleBox : NSObject
@property(nonatomic, assign) UNIUNAlertStyle value;
- (instancetype)initWithValue:(UNIUNAlertStyle)value;
@end

/// The current configuration of a notification setting
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsetting) for more information
typedef NS_ENUM(NSUInteger, UNIUNNotificationSetting) {
  UNIUNNotificationSettingNotSupported = 0,
  UNIUNNotificationSettingDisabled = 1,
  UNIUNNotificationSettingEnabled = 2,
};

/// Wrapper for UNIUNNotificationSetting to allow for nullability.
@interface UNIUNNotificationSettingBox : NSObject
@property(nonatomic, assign) UNIUNNotificationSetting value;
- (instancetype)initWithValue:(UNIUNNotificationSetting)value;
@end

/// Conditions to show/reveal notification content to the user
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unshowpreviewssetting) for more information
typedef NS_ENUM(NSUInteger, UNIUNShowPreviewsSetting) {
  UNIUNShowPreviewsSettingAlways = 0,
  UNIUNShowPreviewsSettingWhenAuthenticated = 1,
  UNIUNShowPreviewsSettingNever = 2,
};

/// Wrapper for UNIUNShowPreviewsSetting to allow for nullability.
@interface UNIUNShowPreviewsSettingBox : NSObject
@property(nonatomic, assign) UNIUNShowPreviewsSetting value;
- (instancetype)initWithValue:(UNIUNShowPreviewsSetting)value;
@end

@class UNIRemoteMessage;
@class UNINotification;
@class UNIUNNotificationSettings;

@interface UNIRemoteMessage : NSObject
+ (instancetype)makeWithNotification:(nullable UNINotification *)notification
    data:(nullable NSDictionary<NSString *, id> *)data;
@property(nonatomic, strong, nullable) UNINotification * notification;
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * data;
@end

@interface UNINotification : NSObject
+ (instancetype)makeWithTitle:(nullable NSString *)title
    body:(nullable NSString *)body;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * body;
@end

/// The object for reading notification-related settings and the authorization status of your app.
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings) for more information
@interface UNIUNNotificationSettings : NSObject
+ (instancetype)makeWithAuthorizationStatus:(nullable UNIUNAuthorizationStatusBox *)authorizationStatus
    soundSetting:(nullable UNIUNNotificationSettingBox *)soundSetting
    badgeSetting:(nullable UNIUNNotificationSettingBox *)badgeSetting
    alertSetting:(nullable UNIUNNotificationSettingBox *)alertSetting
    notificationCenterSetting:(nullable UNIUNNotificationSettingBox *)notificationCenterSetting
    lockScreenSetting:(nullable UNIUNNotificationSettingBox *)lockScreenSetting
    carPlaySetting:(nullable UNIUNNotificationSettingBox *)carPlaySetting
    alertStyle:(nullable UNIUNAlertStyleBox *)alertStyle
    showPreviewsSetting:(nullable UNIUNShowPreviewsSettingBox *)showPreviewsSetting
    criticalAlertSetting:(nullable UNIUNNotificationSettingBox *)criticalAlertSetting
    providesAppNotificationSettings:(nullable NSNumber *)providesAppNotificationSettings
    announcementSetting:(nullable UNIUNNotificationSettingBox *)announcementSetting;
@property(nonatomic, strong, nullable) UNIUNAuthorizationStatusBox * authorizationStatus;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * soundSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * badgeSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * alertSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * notificationCenterSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * lockScreenSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * carPlaySetting;
@property(nonatomic, strong, nullable) UNIUNAlertStyleBox * alertStyle;
@property(nonatomic, strong, nullable) UNIUNShowPreviewsSettingBox * showPreviewsSetting;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * criticalAlertSetting;
@property(nonatomic, strong, nullable) NSNumber * providesAppNotificationSettings;
@property(nonatomic, strong, nullable) UNIUNNotificationSettingBox * announcementSetting;
@end

/// The codec used by UNIPushHostApi.
NSObject<FlutterMessageCodec> *UNIPushHostApiGetCodec(void);

@protocol UNIPushHostApi
/// Returns null if it doesn't exist.
/// See [PushFlutterApi.onNotificationTap] to understand why a RemoteMessage is not provided here.
- (nullable NSDictionary<NSString *, id> *)getNotificationTapWhichLaunchedTerminatedAppWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)getTokenWithCompletion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)backgroundFlutterApplicationReadyWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onListenToOnNewTokenWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onCancelToOnNewTokenWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Pass true for the option you want permission to use
/// Returns true if permission was granted.
- (void)requestPermissionBadge:(BOOL)badge sound:(BOOL)sound alert:(BOOL)alert carPlay:(BOOL)carPlay criticalAlert:(BOOL)criticalAlert provisional:(BOOL)provisional providesAppNotificationSettings:(BOOL)providesAppNotificationSettings announcement:(BOOL)announcement completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)getNotificationSettingsWithCompletion:(void (^)(UNIUNNotificationSettings *_Nullable, FlutterError *_Nullable))completion;
- (void)areNotificationsEnabledWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpUNIPushHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UNIPushHostApi> *_Nullable api);

extern void SetUpUNIPushHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UNIPushHostApi> *_Nullable api, NSString *messageChannelSuffix);

/// The codec used by UNIPushFlutterApi.
NSObject<FlutterMessageCodec> *UNIPushFlutterApiGetCodec(void);

@interface UNIPushFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
- (void)onMessageMessage:(UNIRemoteMessage *)message completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onBackgroundMessageMessage:(UNIRemoteMessage *)message completion:(void (^)(FlutterError *_Nullable))completion;
/// Unfortunately, the intent provided to the app when a user taps on a
/// notification does not include notification's title or body.
/// In this instance, it makes more sense to remove this useful functionality from iOS too.
/// Only the data property on the RemoteMessage is returned to the user.
/// This is effectively the lowest common denominator API.
///
/// Hint: You can still include the title, body or other metadata in your
/// data payload to identify what notification the user tapped on.
- (void)onNotificationTapData:(NSDictionary<NSString *, id> *)data completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onNewTokenToken:(NSString *)token completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onOpenNotificationSettingsWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
